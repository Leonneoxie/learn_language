"""
collect readme

copy such as:
coderunner/README.rst -> source/coderunner.rst
../README.rst -> index.rst
"""
import os
import shutil

INDEX = "source/index.rst"
toc = []

def copy_readme(src, dst=None, replace=[], in_toc=True):
    """
    replace :: [(frm :: str, to :: str)]
    """
    if not dst:
        dst = os.path.split(src)[1]

    if in_toc:
        toc.append(dst)

    if os.path.isdir(src):
        src = os.path.join(src, "README.rst")

    dstfile = "source/%s.rst" % dst
    if not replace:
        shutil.copy(src, dst)
    else:
        data = file(src).read()
        for (frm, to) in replace:
            data = data.replace(frm, to)
        file(dstfile, "w").write(data)

    return dst


def update_toc(toc=toc, target=INDEX, maxdepth=2):
    buf = [".. toctree::", "   :maxdepth: %d\n" % maxdepth]
    for x in toc:
        buf.append("   %s" % x)
    tocstr = "\n".join(buf)

    data = file(target).read()
    data = data.replace(
        ".. toctree::", tocstr)
    file(target, "w").write(data)


def make_tocstr(toc=toc, target=INDEX, maxdepth=2):
    buf = [".. toctree::", "   :maxdepth: %d\n" % maxdepth]
    for x in toc:
        buf.append("   %s" % x)
    tocstr = "\n".join(buf)
    return tocstr


def main():
    shutil.copy("../README.rst", INDEX)
    copy_readme("../coderunner")
    copy_readme("../doc")
    copy_readme("../../edsac")
    copy_readme("../../LISP-on-browser")
    toc.append("test_index") # generated by collect_tests
    toc.append("parser")
    toc.append("brainfxck")

    # TODO combine this two line, copy_rename should take "replace" paramater
    copy_readme(
        "..", "index", in_toc=False,
        replace=[
            (".. toctree", make_tocstr())])
    #shutil.copy("../README.rst", INDEX)
    #update_toc()

if __name__ == "__main__":
    main()
